{{- if .Values.sysfunction.nifi.enabled }}
apiVersion: nuclio.io/v1beta1
kind: NuclioFunction
metadata:
  labels:
    nuclio.io/project-name: nifi
  name: nodejs-nifi-connector
  namespace: sys
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  alias: latest
  build:
    codeEntryType: sourceCode
    commands:
    - npm install --global moment
    - npm install --global jsonwebtoken
    - npm install --global axios
    - npm install --global jwks-rsa
    - npm install --global request
    functionSourceCode: 
    image: nuclio-sys-nodejs-nifi-connector
    registry: {{ .Values.registry.pushPullUrl }}
    runtimeAttributes:
      repositories: []
    timestamp: 1595414065
  description: Provision Users,ProcessGroup, Policy for NiFi
  env:
  - name: AACJWKURL
    value: {{ .Values.sysfunction.nifi.aacjwkurl }}
  - name: AACRESOURCEID
    value: {{ .Values.sysfunction.nifi.aacresourceid }}
  - name: NIFIENDPOINT
    value: {{ .Values.sysfunction.nifi.nifiendpoint }}
  eventTimeout: ""
  handler: main:handler
  image: {{ .Values.registry.pushPullUrl }}/nuclio-sys-nodejs-nifi-connector:latest
  imageHash: "1595414013543366540"
  imagePullSecrets: registry-credentials
  loggerSinks:
  - level: debug
  maxReplicas: 1
  minReplicas: 1
  platform: {}
  readinessTimeoutSeconds: 60
  resources: {}
  runRegistry: {{ .Values.registry.pushPullUrl }}
  runtime: nodejs
  serviceType: NodePort
  targetCPU: 75
  version: -1
  volumes:
  - volume:
      name: certificates
      secret:
        secretName: nifi-user-cert-pem
    volumeMount:
      mountPath: /certificates
      name: certificates
status:
  httpPort: 30068
  scaleToZero:
    lastScaleEvent: resourceUpdated
    lastScaleEventTime: "2020-07-22T10:34:39.935953908Z"
  state: ready
{{- end }}
