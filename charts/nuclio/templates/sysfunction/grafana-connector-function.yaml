{{- if .Values.sysfunction.grafana.enabled }}
apiVersion: nuclio.io/v1beta1
kind: NuclioFunction
metadata:
  labels:
    nuclio.io/project-name: grafana
  name: nodejs-grafana-connector
  namespace: sys
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
spec:
  alias: latest
  build:
    codeEntryType: sourceCode
    commands:
    - npm install --global moment
    - npm install --global jsonwebtoken
    - npm install --global axios
    - npm install --global jwks-rsa
    - npm install --global randomstring
    functionSourceCode: 
    registry: {{ .Values.registry.pushPullUrl }}
    runtimeAttributes:
      repositories: []
    timestamp: 1595407196
  description: Provision Users,Organizations, Roles for Grafana
  env:
  - name: AACJWKURL
    value: {{ .Values.sysfunction.grafana.aacjwkurl }}
  - name: AACRESOURCEID
    value: {{ .Values.sysfunction.grafana.aacresourceid }}
  - name: GRAFANAAUTH
    value: {{ .Values.sysfunction.grafana.grafanaauth }}
  - name: GRAFANAENDPOINT
    value: {{ .Values.sysfunction.grafana.grafanaendpoint }}
  eventTimeout: ""
  handler: main:handler
  image: {{ .Values.registry.pushPullUrl }}/nuclio-sys-nodejs-grafana-connector:latest
  imageHash: "1595407145593988592"
  imagePullSecrets: registry-credentials
  loggerSinks:
  - level: debug
  maxReplicas: 1
  minReplicas: 1
  platform: {}
  readinessTimeoutSeconds: 60
  resources: {}
  runRegistry: {{ .Values.registry.pushPullUrl }}
  runtime: nodejs
  serviceType: NodePort
  targetCPU: 75
  version: -1
status:
  httpPort: 30041
  scaleToZero:
    lastScaleEvent: resourceUpdated
    lastScaleEventTime: "2020-07-22T08:40:26.788055454Z"
  state: ready
{{- end }}
