apiVersion: nuclio.io/v1beta1
kind: NuclioFunction
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"nuclio.io/v1beta1","kind":"NuclioFunction","metadata":{"annotations":{},"generation":1,"labels":{"nuclio.io/project-name":"grafana"},"name":"nodejs-grafana-connector","namespace":"sys","selfLink":"/apis/nuclio.io/v1beta1/namespaces/sys/nucliofunctions/nodejs-grafana-connector"},"spec":{"alias":"latest","build":{"codeEntryType":"sourceCode","commands":["npm install --global moment","npm install --global jsonwebtoken","npm install --global axios","npm install --global jwks-rsa"],"functionSourceCode":"","registry":"scltestacr.azurecr.io","runtimeAttributes":{"repositories":[]},"timestamp":1586973494},"description":"Provision Users,Organizations, Roles for Grafana","env":[{"name":"AACJWKURL","value":"https://aac.kube-test.smartcommunitylab.it/jwk"},{"name":"AACRESOURCEID","value":"3ee98780-48c2-4cea-bf9d-c8bdb5855599"},{"name":"GRAFANAAUTH","value":"Basic YWRtaW46V2J2OWFweENIYTF1RGRmb1BNWTk="},{"name":"GRAFANAENDPOINT","value":"https://grafana.kube-test.smartcommunitylab.it"},{"name":"GRAFANA_USER_PASSW_DEFAULT","value":"password"}],"eventTimeout":"","handler":"main:handler","image":"scltestacr.azurecr.io/nuclio-sys-processor:latest","imageHash":"1587051122690885383","imagePullSecrets":"registry-credentials","loggerSinks":[{"level":"debug"}],"maxReplicas":1,"minReplicas":1,"platform":{},"readinessTimeoutSeconds":60,"resources":{},"runtime":"nodejs","serviceType":"NodePort","targetCPU":75,"version":-1},"status":{"httpPort":31674,"scaleToZero":{"lastScaleEvent":"resourceUpdated","lastScaleEventTime":"2020-04-16T15:32:15.389251027Z"},"state":"ready"}}
  creationTimestamp: "2020-04-18T14:18:13Z"
  generation: 48
  labels:
    nuclio.io/project-name: grafana
  name: nodejs-grafana-connector
  namespace: sys
  resourceVersion: "15805749"
  selfLink: /apis/nuclio.io/v1beta1/namespaces/sys/nucliofunctions/nodejs-grafana-connector
  uid: 0787744b-d95a-4f62-91e4-b26448536358
spec:
  alias: latest
  build:
    codeEntryType: sourceCode
    commands:
    - npm install --global moment
    - npm install --global jsonwebtoken
    - npm install --global axios
    - npm install --global jwks-rsa
    - npm install --global randomstring
    functionSourceCode: 
    registry: scltestacr.azurecr.io
    runtimeAttributes:
      repositories: []
    timestamp: 1593677600
  description: Provision Users,Organizations, Roles for Grafana
  env:
  - name: AACJWKURL
    value: https://aac.kube-test.smartcommunitylab.it/jwk
  - name: AACRESOURCEID
    value: 3ee98780-48c2-4cea-bf9d-c8bdb5855599
  - name: GRAFANAAUTH
    value: Basic YWRtaW46V2J2OWFweENIYTF1RGRmb1BNWTk=
  - name: GRAFANAENDPOINT
    value: https://grafana.kube-test.smartcommunitylab.it
  eventTimeout: ""
  handler: main:handler
  image: scltestacr.azurecr.io/nuclio-sys-processor:latest
  imageHash: "1593677549308974671"
  imagePullSecrets: registry-credentials
  loggerSinks:
  - level: debug
  maxReplicas: 1
  minReplicas: 1
  platform: {}
  readinessTimeoutSeconds: 60
  resources: {}
  runRegistry: scltestacr.azurecr.io
  runtime: nodejs
  serviceType: NodePort
  targetCPU: 75
  version: -1
status:
  httpPort: 30010
  scaleToZero:
    lastScaleEvent: resourceUpdated
    lastScaleEventTime: "2020-07-02T08:13:30.847575204Z"
  state: ready
