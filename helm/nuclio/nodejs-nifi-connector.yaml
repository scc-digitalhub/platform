apiVersion: nuclio.io/v1beta1
kind: NuclioFunction
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"nuclio.io/v1beta1","kind":"NuclioFunction","metadata":{"annotations":{},"generation":1,"labels":{"nuclio.io/project-name":"nifi"},"name":"nodejs-nifi-connector","namespace":"sys","selfLink":"/apis/nuclio.io/v1beta1/namespaces/sys/nucliofunctions/nodejs-nifi-connector"},"spec":{"alias":"latest","build":{"codeEntryType":"sourceCode","commands":["npm install --global moment","npm install --global jsonwebtoken","npm install --global axios","npm install --global jwks-rsa","npm install --global request"],"functionSourceCode":"CnZhciBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKTsKdmFyIGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTsKdmFyIGZzID0gcmVxdWlyZSgnZnMnKTsKdmFyIGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTsKCnZhciBKV0tTX1VSSSAgICAgICAgICAgICAgICAgPSBwcm9jZXNzLmVudi5BQUNKV0tVUkw7CnZhciBDTElFTlRfSUQgICAgICAgICAgICAgICAgPSBwcm9jZXNzLmVudi5BQUNDTElFTlRJRDsKdmFyIE5JRklfRU5EUE9JTlQgICAgICAgICAgICA9IHByb2Nlc3MuZW52Lk5JRklFTkRQT0lOVDsKdmFyIE5JRklfQ0VSVElGSUNBVEVfUEFTU1cgICA9IHByb2Nlc3MuZW52Lk5JRklfQ0VSVElGSUNBVEVfUEFTU1c7CnZhciBDVVNUT01DTEFJTV9ST0xFUyAgICAgICAgPSAibmlmaS9yb2xlcyI7CnZhciBOSUZJX1BBUkVOVF9ST09UICAgICAgICAgPSAicm9vdCI7CnZhciBOSUZJX1JPTEVfUFJPVklERVIgICAgICAgPSAnUk9MRV9QUk9WSURFUic7CnZhciBOSUZJX1JPTEVfTUFOQUdFUiAgICAgICAgPSAnUk9MRV9NQU5BR0VSJzsKdmFyIE5JRklfUk9MRVMgICAgICAgICAgICAgICA9IFtOSUZJX1JPTEVfUFJPVklERVIsJ1JPTEVfTU9OSVRPUicsIE5JRklfUk9MRV9NQU5BR0VSXTsKdmFyIFRZUEVfUFJPQ0VTU19HUk9VUCAgICAgICA9ICIvcHJvY2Vzcy1ncm91cHMvIjsgLy8gdmlldy9tb2RpZnkgcHJvY2VzcyBncm91cCBmbG93CnZhciBUWVBFX09QRVJBVElPTiAgICAgICAgICAgPSAiL29wZXJhdGlvbi9wcm9jZXNzLWdyb3Vwcy8iOyAvLyBvcGVyYXRlIChydW4sIHN0b3AsIGV0Yy4pIHRoZSBwcm9jZXNzIGdyb3VwCnZhciBUWVBFX1BST1ZFTkFOQ0UgICAgICAgICAgPSAiL3Byb3ZlbmFuY2UtZGF0YS9wcm9jZXNzLWdyb3Vwcy8iOyAvLyB2aWV3IHByb3ZlbmFuY2UgZXZlbnRzCnZhciBUWVBFX0RBVEEgICAgICAgICAgICAgICAgPSAiL2RhdGEvcHJvY2Vzcy1ncm91cHMvIjsgLy8gdmlldy9lbXB0eSBxdWV1ZXMsIHZpZXcgbWV0YWRhdGEsIHN1Ym1pdCByZXBsYXlzCnZhciBBQ1RJT05fUkVBRCAgICAgICAgICAgICAgPSAicmVhZCI7CnZhciBBQ1RJT05fV1JJVEUgICAgICAgICAgICAgPSAid3JpdGUiOwp2YXIgQURNSU5fVVNFUiAgICAgICAgICAgICAgID0gImFkbWluIjsKCmNvbnN0IGh0dHBzQWdlbnQgPSBuZXcgaHR0cHMuQWdlbnQoewogIHBmeDogZnMucmVhZEZpbGVTeW5jKCIuL2NlcnRpZmljYXRlcy91c2VyLWNlcnQucDEyIiksCiAgcGFzc3BocmFzZTogTklGSV9DRVJUSUZJQ0FURV9QQVNTVwp9KQoKLyoqCiogQ2hlY2sgSldUIHRva2VuIGlzIHByZXNlbnQsIGlzIHZhbGlkIHdpdGggcmVzcGVjdCB0byB0aGUgcHJlY29uZmlndXJlZCBKV0tTLCBhbmQgaXMgbm90IGV4cGlyZWQuCiogSWYgdGhlIGNoZWNrIGlzIHBhc3NlZCwgdGhlbiByZXR1cm4gZXh0cmFjdGVkIGNsYWltcy4KKi8KdmFyIGV4dHJhY3RDbGFpbXMgPSBhc3luYyhjb250ZXh0LCBoZWFkZXJzLCBjYWxsYmFjaykgPT4gewpmb3IgKHZhciBoIGluIGhlYWRlcnMpIHsKICAgIGlmIChoLnRvTG93ZXJDYXNlKCkgPT09ICdhdXRob3JpemF0aW9uJyAmJiBoZWFkZXJzW2hdKSB7CiAgICAgICAgLy8gRXhwZWN0IGhlYWRlciBpbiB0aGUgZm9ybSBCZWFyZXIgPEpXVD4KICAgICAgICB2YXIgdG9rZW4gPSBoZWFkZXJzW2hdLnN1YnN0cmluZyhoZWFkZXJzW2hdLmluZGV4T2YoJyAnKSsxKTsKICAgICAgICB2YXIgandrc0NsaWVudCA9IHJlcXVpcmUoJ2p3a3MtcnNhJyk7CiAgICAgICAgdmFyIGNsaWVudCA9IGp3a3NDbGllbnQoewogICAgICAgICAgICBqd2tzVXJpOiBKV0tTX1VSSQogICAgICAgIH0pOwogICAgICAgIGZ1bmN0aW9uIGdldEtleShoZWFkZXIsIGtleUNhbGxiYWNrKXsKICAgICAgICAgICAgaWYgKGNvbnRleHQua2V5KSB7CiAgICAgICAgICAgICAgICBrZXlDYWxsYmFjayhudWxsLCBjb250ZXh0LmtleSk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2xpZW50LmdldFNpZ25pbmdLZXkoaGVhZGVyLmtpZCwgZnVuY3Rpb24oZXJyLCBrZXkpIHsKICAgICAgICAgICAgICAgIHZhciBzaWduaW5nS2V5ID0ga2V5ID8ga2V5LnB1YmxpY0tleSB8fCBrZXkucnNhUHVibGljS2V5IDogbnVsbDsKICAgICAgICAgICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ05ldyBrZXkgJyArIHNpZ25pbmdLZXkpOwogICAgICAgICAgICAgICAgaWYoc2lnbmluZ0tleSA9PT0gbnVsbCkKICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmNhbGxiYWNrKG5ldyBjb250ZXh0LlJlc3BvbnNlKHttZXNzYWdlOiAnTWlzc2luZyBzaWduaW5nIGtleSd9LCB7fSwgJ2FwcGxpY2F0aW9uL2pzb24nLCA0MDEpKTsKICAgICAgICAgICAgICAgIGNvbnRleHQua2V5ID0gc2lnbmluZ0tleTsKICAgICAgICAgICAgICAgIGtleUNhbGxiYWNrKG51bGwsIHNpZ25pbmdLZXkpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgIAogICAgICAgIHZhciBvcHRpb25zID0geyBhdWRpZW5jZTogQ0xJRU5UX0lEIH07CiAgIAogICAgICAgIGp3dC52ZXJpZnkodG9rZW4sIGdldEtleSwgb3B0aW9ucywgZnVuY3Rpb24oZXJyLCBkZWNvZGVkKSB7CiAgICAgICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm9XaXRoKCdWZXJpZnkgand0OiBjbGFpbXM6ICcsIGRlY29kZWQpOwogICAgICAgICAgICBpZiAoIWRlY29kZWQpIHsJCiAgICAgICAgICAgICAgICBjb250ZXh0LmNhbGxiYWNrKG5ldyBjb250ZXh0LlJlc3BvbnNlKHttZXNzYWdlOiAnSW5jb3JyZWN0IHNpZ25hdHVyZTogJyAsIGVycjogZXJyfSwge30sICdhcHBsaWNhdGlvbi9qc29uJywgNDAxKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FsbGJhY2soZGVjb2RlZCk7CiAgICAgICAgfSk7IAogICAgICAgIHJldHVybjsgCiAgICB9Cn0KY29udGV4dC5jYWxsYmFjayhuZXcgY29udGV4dC5SZXNwb25zZSh7bWVzc2FnZTogJ01pc3NpbmcgdG9rZW4nfSwge30sICdhcHBsaWNhdGlvbi9qc29uJywgNDAwKSk7Cn0gCi8qKgogKiBDcmVhdGUgUHJvY2Vzc0dyb3VwCiAqLwp2YXIgY3JlYXRlUHJvY2Vzc0dyb3VwID0gYXN5bmMgKHBhcmVudElkLCBwcm9jZXNzR3JvdXBOYW1lLCBwcm9jZXNzR3JvdXBJZCwgYXNzaWduUm9sZSwgcm9sZU5hbWUsIHVzZXJuYW1lKSA9PnsKICAgIGlmKHByb2Nlc3NHcm91cElkID09PSAwKXsKICAgICAgICB2YXIgbmV3UEdJZCA9IGF3YWl0IGNyZWF0ZVBHKHBhcmVudElkLCBwcm9jZXNzR3JvdXBOYW1lKTsKICAgICAgICBhd2FpdCBjcmVhdGVVc2VyKHVzZXJuYW1lKTsKICAgICAgICBhd2FpdCBOSUZJX1JPTEVTLnJlZHVjZSgocCxyb2xlKSA9PiBwLnRoZW4oKCkgPT4gaGFuZGxlVXNlckdyb3VwKHByb2Nlc3NHcm91cE5hbWUgKyAiOiIgKyByb2xlKSksIFByb21pc2UucmVzb2x2ZShudWxsKSk7CiAgICAgICAgYXdhaXQgYXNzaWduUG9saWN5KG5ld1BHSWQsIHByb2Nlc3NHcm91cE5hbWUsIHVzZXJuYW1lKTsKICAgICAgICBpZihhc3NpZ25Sb2xlKSBhc3NpZ25Sb2xlMlVzZXIocHJvY2Vzc0dyb3VwTmFtZSArICI6IiArIHJvbGVOYW1lLCB1c2VybmFtZSwgbmV3UEdJZCk7CiAgICAgICAgcmV0dXJuIFtuZXdQR0lkLCAwLCAwXQogICAgfSBlbHNlewogICAgICAgIGF3YWl0IGNyZWF0ZVVzZXIodXNlcm5hbWUpOwogICAgICAgIGF3YWl0IE5JRklfUk9MRVMucmVkdWNlKChwLHJvbGUpID0+IHAudGhlbigoKSA9PiBoYW5kbGVVc2VyR3JvdXAocHJvY2Vzc0dyb3VwTmFtZSArICI6IiArIHJvbGUpKSwgUHJvbWlzZS5yZXNvbHZlKG51bGwpKTsKICAgICAgICBhd2FpdCBhc3NpZ25Qb2xpY3kocHJvY2Vzc0dyb3VwSWQsIHByb2Nlc3NHcm91cE5hbWUsIHVzZXJuYW1lKTsKICAgICAgICBpZihhc3NpZ25Sb2xlKSBhc3NpZ25Sb2xlMlVzZXIocHJvY2Vzc0dyb3VwTmFtZSArICI6IiArIHJvbGVOYW1lLCB1c2VybmFtZSwgcHJvY2Vzc0dyb3VwSWQpOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW3Byb2Nlc3NHcm91cElkLCBwcm9jZXNzR3JvdXBOYW1lLCBwYXJlbnRJZF0pOwogICAgfQp9Cgp2YXIgY3JlYXRlUEcgPSAocGFyZW50SWQsIHByb2Nlc3NHcm91cE5hbWUpID0+ewogICAgdmFyIG9ialRvQmVTZW50ID0geydyZXZpc2lvbic6IHsndmVyc2lvbic6IDB9LCdwb3NpdGlvbic6IHsneCc6TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjEwMDApLCAneSc6TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjEwMDApfSwgJ2NvbXBvbmVudCc6IHsnbmFtZSc6IHByb2Nlc3NHcm91cE5hbWV9fTsKICAgIGNvbnNvbGUubG9nKCJJbnNpZGUgUEcgY3JlYXRpb24gb2YgcHJvY2Vzc0dyb3VwTmFtZTogIiArIHByb2Nlc3NHcm91cE5hbWUgKyAiICIgKyBOSUZJX0VORFBPSU5UICsgJy9wcm9jZXNzLWdyb3Vwcy8nICsgcGFyZW50SWQgKyAnL3Byb2Nlc3MtZ3JvdXBzJyk7CiAgICByZXR1cm4gYXhpb3MucG9zdChOSUZJX0VORFBPSU5UICsgJy9wcm9jZXNzLWdyb3Vwcy8nICsgcGFyZW50SWQgKyAnL3Byb2Nlc3MtZ3JvdXBzJywgb2JqVG9CZVNlbnQsIHtodHRwc0FnZW50fSkKICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJjcmVhdGVkIHBnaWQgIiArIHJlc3BvbnNlLmRhdGEuaWQpOwogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5pZDsKICAgICAgICB9KTsKfQoKLyoqCiAqIExpc3QgUHJvY2Vzc0dyb3VwcwogKi8KdmFyIGdldFBHSWQgPSAocGFyZW50SWQsIHByb2Nlc3NHcm91cE5hbWUpID0+IHsKICAgIGNvbnNvbGUubG9nKCJJbnNpZGUgZ2V0UEdJZDogIiArIHByb2Nlc3NHcm91cE5hbWUgKyAiICIgKyBOSUZJX0VORFBPSU5UICsgJy9mbG93L3Byb2Nlc3MtZ3JvdXBzLycgKyBwYXJlbnRJZCArICcvc3RhdHVzP3JlY3Vyc2l2ZT1mYWxzZScpOwogICAgcmV0dXJuIGF4aW9zLmdldChOSUZJX0VORFBPSU5UICsgJy9mbG93L3Byb2Nlc3MtZ3JvdXBzLycgKyBwYXJlbnRJZCArICcvc3RhdHVzP3JlY3Vyc2l2ZT1mYWxzZScsICB7aHR0cHNBZ2VudH0pCiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgICB2YXIgcGdJZCA9IHJlYWRSZWN1cnNpdmVQRyhyZXNwb25zZS5kYXRhLnByb2Nlc3NHcm91cFN0YXR1cy5hZ2dyZWdhdGVTbmFwc2hvdCwgcHJvY2Vzc0dyb3VwTmFtZSk7CiAgICAgICAgICAgIHJldHVybiBbcGFyZW50SWQsIHBnSWRdOwogICAgICAgICB9KQogICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ1Byb2JsZW0gaW4gZ2V0IHJlc3BvbnNlIG9mIHJlY3Vyc2l2ZSBwcm9jZXNzIGdyb3Vwcy4gZ2V0UEdJZCcgKyBlcnIpOwogICAgICAgIH0pOwp9CgovKioKICogRmluZCB0aGUgcHJvcGVyIHByb2Nlc3MgZ3JvdXAgSWQgYnkgY2hlY2tpbmcgaW4gdGhlIGRlc2NlbmRhbnQgZ3JvdXBzIG9mIHRoZSBjdXJyZW50IG5vZGUKICovCnZhciByZWFkUmVjdXJzaXZlUEcgPSAgKHBnU25hcHNob3RzLCBwcm9jZXNzR3JvdXBOYW1lKSA9PiB7CiAgICBjb25zb2xlLmxvZygiSW5zaWRlIHJlYWRSZWN1cnNpdmVQRzogIiArIHByb2Nlc3NHcm91cE5hbWUpOwogICAgdmFyIGN1cnJTbmFwU2hvdHM7CiAgICBpZihwZ1NuYXBzaG90cyAhPT0gbnVsbCAmJiBwZ1NuYXBzaG90cy5wcm9jZXNzR3JvdXBTdGF0dXNTbmFwc2hvdHMgIT09IG51bGwgJiYgCiAgICAgICAgcGdTbmFwc2hvdHMgIT0gdW5kZWZpbmVkICYmIHBnU25hcHNob3RzLnByb2Nlc3NHcm91cFN0YXR1c1NuYXBzaG90cyAhPSB1bmRlZmluZWQgJiYKICAgICAgICBwZ1NuYXBzaG90cy5wcm9jZXNzR3JvdXBTdGF0dXNTbmFwc2hvdHMubGVuZ3RoID4gMCl7CiAgICAgICAgZm9yKHZhciBpPTA7IGk8cGdTbmFwc2hvdHMucHJvY2Vzc0dyb3VwU3RhdHVzU25hcHNob3RzLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgY3VyclNuYXBTaG90cyA9IHBnU25hcHNob3RzLnByb2Nlc3NHcm91cFN0YXR1c1NuYXBzaG90c1tpXTsKICAgICAgICAgICAgaWYoY3VyclNuYXBTaG90cyAhPT0gbnVsbCl7CiAgICAgICAgICAgICAgICB2YXIgY3VyclNuYXAgPSBjdXJyU25hcFNob3RzLnByb2Nlc3NHcm91cFN0YXR1c1NuYXBzaG90OwogICAgICAgICAgICAgICAgaWYoY3VyclNuYXAgIT09IG51bGwpewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJJbnNpZGUgcmVhZFJlY3Vyc2l2ZVBHIGZvciBwZ0lkICIgKyBjdXJyU25hcC5pZCArICIgYW5kIHBnTmFtZTogIiArIGN1cnJTbmFwLm5hbWUpOwogICAgICAgICAgICAgICAgICAgIGlmKGN1cnJTbmFwLm5hbWUgPT09IHByb2Nlc3NHcm91cE5hbWUpewogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiUHJvY2Vzc0dyb3VwIG5hbWUgZm91bmQ6ICIgKyBjdXJyU25hcC5uYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJTbmFwLmlkOwogICAgICAgICAgICAgICAgICAgIH0gCiAgICAgICAgICAgICAgICAgICAgLy92YXIgcmV0ID0gcmVhZFJlY3Vyc2l2ZVBHKGN1cnJTbmFwLCBwcm9jZXNzR3JvdXBOYW1lKTsKICAgICAgICAgICAgICAgICAgICAvL2lmKHJldCAhPSAwICl7CiAgICAgICAgICAgICAgICAgICAgLy8gICAgcmV0dXJuIHJldDsKICAgICAgICAgICAgICAgICAgICAvL30KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiAwOwp9CgovKioKICogQ3JlYXRlIFVzZXJHcm91cAogKi8KdmFyIGhhbmRsZVVzZXJHcm91cCA9ICh1c2VyR3JwTmFtZSkgPT4gewogICAgdmFyIG9ialRvQmVTZW50ID0geydyZXZpc2lvbic6IHsndmVyc2lvbic6IDB9LCdjb21wb25lbnQnOiB7J2lkZW50aXR5JzogdXNlckdycE5hbWV9fTsKICAgIHJldHVybiBheGlvcy5wb3N0KE5JRklfRU5EUE9JTlQgKyAnL3RlbmFudHMvdXNlci1ncm91cHMnLCBvYmpUb0JlU2VudCwge2h0dHBzQWdlbnR9KQogICAgICAgIC50aGVuKHJlcyA9PiB7Y29uc29sZS5sb2coJ1VzZXIgR3JvdXAgJyArIHVzZXJHcnBOYW1lICsgJyBzdWNjZXNzZnVsbHkgY3JlYXRlZC4gJyk7cmV0dXJuIHJlcy5kYXRhLmlkO30pCiAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZygnRHVyaW5nIHVzZXIgR3JvdXAgY3JlYXRpb24uIFVzZXJHcm91cCAnICsgdXNlckdycE5hbWUgKyAnIGFscmVhZHkgZXhpc3RzLiAnICsgZXJyKSk7Cn0KCi8qKgogKiBnZXQgVXNlckdyb3VwCiAqLwp2YXIgZ2V0VXNlckdyb3VwID0gKHVzZXJHcnBOYW1lKSA9PiB7CiAgICByZXR1cm4gYXhpb3MuZ2V0KE5JRklfRU5EUE9JTlQgKyAnL3RlbmFudHMvdXNlci1ncm91cHMnLCB7aHR0cHNBZ2VudH0pCiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzKSB7CiAgICAgICAgICAgIHZhciB1c2VyR3JwbGlzdCA9IHJlcy5kYXRhLnVzZXJHcm91cHM7CiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpPHVzZXJHcnBsaXN0Lmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgICAgIGlmKHVzZXJHcnBsaXN0W2ldLmNvbXBvbmVudC5pZGVudGl0eSA9PSB1c2VyR3JwTmFtZSl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJHcnBsaXN0W2ldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBkdXJpbmcgZ2V0VXNlckdyb3VwICcgKyBlcnIpOwogICAgICAgIH0pOwp9Ci8qKgogKiBDcmVhdGUgVXNlcgogKi8KdmFyIGNyZWF0ZVVzZXIgPSBhc3luYyh1c2VyTmFtZSkgPT4gewogICAgdmFyIG9ialRvQmVTZW50ID0geydyZXZpc2lvbic6IHsndmVyc2lvbic6IDB9LCdjb21wb25lbnQnOiB7J2lkZW50aXR5JzogdXNlck5hbWV9fTsKICAgIGNvbnNvbGUubG9nKCJJbnNpZGUgY3JlYXRlVXNlci4uLiIpOwogICAgYXdhaXQgZ2V0UG9saWN5KEFDVElPTl9SRUFELCAiL2Zsb3ciKS50aGVuKHBvbGljeVVJID0+ewogICAgICAgIGF4aW9zLnBvc3QoTklGSV9FTkRQT0lOVCArICcvdGVuYW50cy91c2VycycsIG9ialRvQmVTZW50LCB7aHR0cHNBZ2VudH0pCiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1VzZXIgJyArIHVzZXJOYW1lICsgJyBzdWNjZXNzZnVsbHkgY3JlYXRlZC4gJyk7CiAgICAgICAgICAgICAgICBpZihwb2xpY3lVSSAhPSBudWxsKXsKICAgICAgICAgICAgICAgICAgICBwb2xpY3lVSS5jb21wb25lbnQudXNlcnMucHVzaCh7J3JldmlzaW9uJzogeyd2ZXJzaW9uJzogMH0sICdpZCc6IHJlcy5kYXRhLmlkLCdjb21wb25lbnQnOiB7J2lkZW50aXR5JzogdXNlck5hbWUsJ2lkJzogcmVzLmRhdGEuaWR9fSk7CiAgICAgICAgICAgICAgICAgICAgYXhpb3MucHV0KE5JRklfRU5EUE9JTlQgKyAnL3BvbGljaWVzLycrIHBvbGljeVVJWydpZCddLCBwb2xpY3lVSSwge2h0dHBzQWdlbnR9KQogICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXN1bHQgPT4gY29uc29sZS5sb2coJ1VzZXIgYXNzaWduZWQgc3VjY2Vzc2Z1bGx5IHRvIHRoZSBwb2xpY3kgdG8gdmlldyB0aGUgVUkgJykpCiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZygnRXJyb3IgZHVyaW5nIHVzZXIgYXNzaWdubWVudCB0byB0aGUgcG9saWN5IHRvIHZpZXdVSS4gJyArIGVycm9yKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmRhdGEuaWQ7CiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEdXJpbmcgdXNlciBjcmVhdGlvbi4gVXNlciAnICsgdXNlck5hbWUgKyAnIGFscmVhZHkgZXhpc3RzICcgKyBlcnIpOwogICAgICAgICAgICB9KTsKICAgIH0pCn0KCi8qKgogKiBnZXQgVXNlcgogKi8KdmFyIGdldFVzZXIgPSAodXNlck5hbWUpID0+IHsKICAgIGNvbnNvbGUubG9nKCJJbnNpZGUgZ2V0VXNlciAiICsgdXNlck5hbWUpOwogICAgcmV0dXJuIGF4aW9zLmdldChOSUZJX0VORFBPSU5UICsgJy90ZW5hbnRzL3VzZXJzJywge2h0dHBzQWdlbnR9KQogICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgICB2YXIgdXNlcmxpc3QgPSByZXMuZGF0YS51c2VyczsKICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8dXNlcmxpc3QubGVuZ3RoOyBpKyspewogICAgICAgICAgICAgICAgaWYodXNlcmxpc3RbaV0uY29tcG9uZW50LmlkZW50aXR5ID09PSB1c2VyTmFtZSl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJsaXN0W2ldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7fTsKICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7Y29uc29sZS5sb2coZXJyb3IpOyByZXR1cm4ge307fSk7CiAgICB9Ci8qKgogKiBhc3NpZ24gcm9sZSB0byB1c2VyCiAqLwp2YXIgYXNzaWduUm9sZTJVc2VyID0gYXN5bmMgKHJvbGUsIHVzZXJOYW1lLCBwcm9jZXNzR3JwSWQpID0+IHsKICAgIGNvbnNvbGUubG9nKCJJbnNpZGUgYXNzaWduUm9sZTJVc2VyLi4uIik7CiAgICB2YXIgdXNlciA9IGF3YWl0IGdldFVzZXIodXNlck5hbWUpOwogICAgaWYodXNlciAhPT0gbnVsbCAmJiB1c2VyICE9PSB1bmRlZmluZWQgJiYgdXNlciAhPSB7fSl7CiAgICAgICAgdmFyIHVzZXJHcnAgPSBhd2FpdCBnZXRVc2VyR3JvdXAocm9sZSk7CiAgICAgICAgdXNlckdycC5jb21wb25lbnQudXNlcnMucHVzaCh7J3JldmlzaW9uJzogdXNlci5yZXZpc2lvbiwgImlkIjogdXNlci5pZH0pOwogICAgICAgIHZhciBncm91cElkID0gdXNlckdycC5pZDsKICAgICAgICBjb25zb2xlLmxvZyhOSUZJX0VORFBPSU5UICsgJy90ZW5hbnRzL3VzZXItZ3JvdXBzLycgKyBncm91cElkKTsKICAgICAgICAvL2Fzc2lnbiB1c2VyIHRvIHVzckdycAogICAgICAgIGF3YWl0IGF4aW9zLnB1dChOSUZJX0VORFBPSU5UICsgJy90ZW5hbnRzL3VzZXItZ3JvdXBzLycgKyBncm91cElkLCB1c2VyR3JwLCB7aHR0cHNBZ2VudH0pCiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1VzZXIgc3VjY2Vzc2Z1bGx5IGFzc2lnbmVkIHRvIHRoZSB1c2VyR3JwJyk7CiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBkdXJpbmcgIGFzc2lnblJvbGUyVXNlcjogYXNzaWduIHVzZXIgdG8gdXNyR3JwICcgKyBlcnIpOwogICAgICAgICAgICB9KTsKICAgICAgICAvLyBhc3NpZ24gdXNlciB0byBwb2xpY3kKICAgICAgICB2YXIgcG9saWN5TmFtZSA9IFRZUEVfUFJPQ0VTU19HUk9VUCArIHByb2Nlc3NHcnBJZDsKICAgICAgICB2YXIgcG9saWN5ID0gYXdhaXQgZ2V0UG9saWN5KEFDVElPTl9SRUFELCBwb2xpY3lOYW1lKTsKICAgICAgICBwb2xpY3kuY29tcG9uZW50LnVzZXJzLnB1c2goeydyZXZpc2lvbic6IHVzZXIucmV2aXNpb24sICJpZCI6IHVzZXIuaWR9KTsKICAgICAgICBjb25zb2xlLmxvZyhOSUZJX0VORFBPSU5UICsgJy9wb2xpY2llcy8nICsgcG9saWN5LmlkKTsKICAgICAgICBhd2FpdCBheGlvcy5wdXQoTklGSV9FTkRQT0lOVCArICcvcG9saWNpZXMvJyArIHBvbGljeS5pZCwgcG9saWN5LCB7aHR0cHNBZ2VudH0pCiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1VzZXIgc3VjY2Vzc2Z1bGx5IGFzc2lnbmVkIHRvIHRoZSBwb2xpY3kgJytwb2xpY3lOYW1lKTsKICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGR1cmluZyAgYXNzaWduUm9sZTJVc2VyOiBhc3NpZ24gdXNlciB0byBwb2xpY3kgJyArIHBvbGljeU5hbWUgKyAiICIrIGVycik7CiAgICAgICAgICAgIH0pOwogICAgfSBlbHNlewogICAgICAgIGNvbnNvbGUubG9nKCJVc2VyIG5vdCBmb3VuZCBpbiBhc3NpZ25Sb2xlMlVzZXIiKTsKICAgIH0KfQoKLyoqCiAqIENyZWF0ZSBQb2xpY3kKICovCnZhciBjcmVhdGVQb2xpY3kgPSBhc3luYyAoYWN0aW9uLCByZXNvdXJjZSwgUEdOYW1lLCB1c2VyR3JwcywgdXNlck5hbWUpID0+IHsKICAgIGNvbnNvbGUubG9nKCJJbnNpZGUgY3JlYXRlUG9saWN5Iik7IAogICAgdmFyIG5ld1VzZXJHcnBzID0gcHJlcGFyZVVHNFBvbGljeShQR05hbWUsIHVzZXJHcnBzLCBhY3Rpb24pOwogICAgYXdhaXQgZ2V0VXNlcihBRE1JTl9VU0VSKS50aGVuKGFkbWluVXNlciA9PnsKICAgICAgICB2YXIgdXNyID0geydyZXZpc2lvbic6IHsndmVyc2lvbic6IDB9LCdpZCc6IGFkbWluVXNlci5pZH07CiAgICAgICAgdmFyIG9ialRvQmVTZW50ID0geydyZXZpc2lvbic6IHsndmVyc2lvbic6IDB9LCdjb21wb25lbnQnOiB7J2FjdGlvbic6IGFjdGlvbiwgJ3Jlc291cmNlJzpyZXNvdXJjZSwgJ3VzZXJHcm91cHMnOm5ld1VzZXJHcnBzLCAndXNlcnMnOiBbdXNyXX19OwogICAgICAgIGF4aW9zLnBvc3QoTklGSV9FTkRQT0lOVCArICcvcG9saWNpZXMnLCBvYmpUb0JlU2VudCwge2h0dHBzQWdlbnR9KQogICAgICAgICAgICAudGhlbihyZXN1bHQgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvbGljeSBjcmVhdGVkIHN1Y2Nlc3NmdWxseSAnKTsKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTsKICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0R1cmluZyBjcmVhdGVQb2xpY3kuJyArIGVycm9yKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7Cn0KCi8qKgogKiBVcGRhdGUgUG9saWN5CiAqLwp2YXIgdXBkYXRlUG9saWN5ID0gYXN5bmMgKHBvbGljeSwgYWN0aW9uLCByZXNvdXJjZSwgUEdOYW1lLCB1c2VyR3JwcywgdXNlck5hbWUpID0+IHsKICAgIGNvbnNvbGUubG9nKCJJbnNpZGUgdXBkYXRlUG9saWN5Iik7IAogICAgdmFyIG5ld1VzZXJHcnBzID0gcHJlcGFyZVVHNFBvbGljeShQR05hbWUsIHVzZXJHcnBzLCBhY3Rpb24pOwogICAgYXdhaXQgZ2V0VXNlcihBRE1JTl9VU0VSKS50aGVuKGFkbWluVXNlciA9PnsKICAgICAgICB2YXIgdXNyID0geydyZXZpc2lvbic6IHsndmVyc2lvbic6IDB9LCdpZCc6IGFkbWluVXNlci5pZH07CiAgICAgICAgcG9saWN5LmNvbXBvbmVudC51c2VyR3JvdXBzID0gbmV3VXNlckdycHM7CiAgICAgICAgcG9saWN5LmNvbXBvbmVudC51c2VycyA9IFt1c3JdOwogICAgICAgIGF4aW9zLnB1dChOSUZJX0VORFBPSU5UICsgJy9wb2xpY2llcy8nICsgcG9saWN5LmlkLCBwb2xpY3ksIHtodHRwc0FnZW50fSkKICAgICAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb2xpY3kgdXBkYXRlZCBzdWNjZXNzZnVsbHkgJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmRhdGE7CiAgICAgICAgICAgIH0pIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZygiRXJyb3IgZHVyaW5nIHVwZGF0ZVBvbGljeSAiICsgZXJyb3IpKTsKICAgICAgICB9KTsKfQoKdmFyIHVwc2VydFBvbGljeSA9IGFzeW5jIChhY3Rpb24sIHJlc291cmNlLCBQR05hbWUsIHVzZXJHcnBzLCB1c2VyTmFtZSkgPT4gewogICAgY29uc29sZS5sb2coIkluc2lkZSB1cHNlcnRQb2xpY3kgIiArIGFjdGlvbiArICIgcmVzb3VyY2U6ICIgKyByZXNvdXJjZSk7CiAgICB0cnl7CiAgICAgICAgYXdhaXQgZ2V0UG9saWN5KGFjdGlvbiwgcmVzb3VyY2UsIFBHTmFtZSwgdXNlckdycHMsIHVzZXJOYW1lKQogICAgICAgICAgICAudGhlbihyZXN1bHQgPT57CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiY2hlY2sgcG9saWN5IGV4aXN0ZW5jZSAiKTsgCiAgICAgICAgICAgICAgICBpZihyZXN1bHQgIT0gbnVsbCAmJiByZXN1bHQuY29tcG9uZW50ICE9IG51bGwgJiYgcmVzdWx0LmNvbXBvbmVudC5yZXNvdXJjZSAhPT0gcmVzb3VyY2UpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygicG9saWN5IGRvZXNuJ3QgZXhpc3QuIGNyZWF0aW5nIGl0Li4uIik7CiAgICAgICAgICAgICAgICAgICAgY3JlYXRlUG9saWN5KGFjdGlvbiwgcmVzb3VyY2UsIFBHTmFtZSwgdXNlckdycHMsIHVzZXJOYW1lKTsKICAgICAgICAgICAgICAgIH0gZWxzZXsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygicG9saWN5IGV4aXN0cy4gdXBkYXRpbmcgaXQuLi4iKTsKICAgICAgICAgICAgICAgICAgICB1cGRhdGVQb2xpY3kocmVzdWx0LCBhY3Rpb24sIHJlc291cmNlLCBQR05hbWUsIHVzZXJHcnBzLCB1c2VyTmFtZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiBlcnJvcikKICAgIH0gY2F0Y2goZXJyb3Ipe2NvbnNvbGUubG9nKGVycm9yKTt9Cn0KCi8qKgogKiBHZXQgUG9saWN5CiAqLwp2YXIgZ2V0UG9saWN5ID0gKGFjdGlvbiwgcmVzb3VyY2UpID0+IHsKICAgIGNvbnNvbGUubG9nKCJJbnNpZGUgZ2V0UG9saWN5OiAiICsgTklGSV9FTkRQT0lOVCArICcvcG9saWNpZXMvJyArIGFjdGlvbiArIHJlc291cmNlKTsKICAgIHRyeXsKICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KE5JRklfRU5EUE9JTlQgKyAnL3BvbGljaWVzLycgKyBhY3Rpb24gKyByZXNvdXJjZSwge2h0dHBzQWdlbnR9KQogICAgICAgICAgICAudGhlbihyZXMgPT4gcmVzLmRhdGEpCiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiBlcnJvcik7CiAgICB9IGNhdGNoKGVycm9yKXtjb25zb2xlLmxvZyhlcnJvcik7fQp9Cgp2YXIgYXNzaWduUG9saWN5ID0gYXN5bmMgKFBHSWQsIFBHTmFtZSwgdXNlck5hbWUpID0+IHsKICAgIHZhciB1c2VyR3JwczsKICAgIHJldHVybiBheGlvcy5nZXQoTklGSV9FTkRQT0lOVCArICcvdGVuYW50cy91c2VyLWdyb3VwcycsIHtodHRwc0FnZW50fSkKICAgICAgICAudGhlbihyZXN1bHQgPT4gewogICAgICAgICAgICBjb25zb2xlLmxvZygibGlzdGluZyB1c2VyIGdycHMuICIpOwogICAgICAgICAgICB1c2VyR3JwcyA9IHJlc3VsdC5kYXRhLnVzZXJHcm91cHM7CiAgICAgICAgICAgIHVwc2VydFBvbGljeShBQ1RJT05fUkVBRCwgICBUWVBFX1BST0NFU1NfR1JPVVAgKyBQR0lkLCBQR05hbWUsIHVzZXJHcnBzLCB1c2VyTmFtZSk7CiAgICAgICAgICAgIHVwc2VydFBvbGljeShBQ1RJT05fV1JJVEUsICBUWVBFX1BST0NFU1NfR1JPVVAgKyBQR0lkLCBQR05hbWUsIHVzZXJHcnBzLCB1c2VyTmFtZSk7CiAgICAgICAgICAgIHVwc2VydFBvbGljeShBQ1RJT05fUkVBRCwgICBUWVBFX1BST1ZFTkFOQ0UgKyBQR0lkLCBQR05hbWUsdXNlckdycHMsIHVzZXJOYW1lKTsKICAgICAgICAgICAgdXBzZXJ0UG9saWN5KEFDVElPTl9XUklURSwgIFRZUEVfT1BFUkFUSU9OICsgUEdJZCwgUEdOYW1lLHVzZXJHcnBzLCB1c2VyTmFtZSk7CiAgICAgICAgICAgIHVwc2VydFBvbGljeShBQ1RJT05fUkVBRCwgICBUWVBFX0RBVEEgKyBQR0lkLCBQR05hbWUsdXNlckdycHMsIHVzZXJOYW1lKTsKICAgICAgICAgICAgdXBzZXJ0UG9saWN5KEFDVElPTl9XUklURSwgIFRZUEVfREFUQSArIFBHSWQsIFBHTmFtZSx1c2VyR3JwcywgdXNlck5hbWUpOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUubG9nKCdFcnJvciBkdXJpbmcgZ2V0VXNlckdyb3VwICcgKyBlcnIpKTsKICAgIAp9Cgp2YXIgcHJlcGFyZVVHNFBvbGljeSA9IChwcm9jZXNzR3JvdXBOYW1lLCBsaXN0VUcsIGFjdGlvbikgPT57CiAgICB2YXIgbmFtZSxpZCxyb2xlOwogICAgdmFyIG9iakdycCA9IHt9OwogICAgdmFyIG5ld0dycHMgPSBbXTsKICAgIGZvcih2YXIgaT0wOyBpPGxpc3RVRy5sZW5ndGg7IGkrKyl7CiAgICAgICAgbmFtZSAgICA9IGxpc3RVR1tpXVsiY29tcG9uZW50Il1bJ2lkZW50aXR5J107CiAgICAgICAgaWQgICAgICA9IGxpc3RVR1tpXVsiaWQiXTsKICAgICAgICByb2xlICAgID0gbmFtZS5zdWJzdHJpbmcobmFtZS5pbmRleE9mKCI6IikrMSk7CiAgICAgICAgaWYobmFtZS5zdWJzdHJpbmcoMCxuYW1lLmluZGV4T2YoIjoiKSkgPT09IHByb2Nlc3NHcm91cE5hbWUpewogICAgICAgICAgICBpZihhY3Rpb24gPT09IEFDVElPTl9SRUFEIHx8IChhY3Rpb24gPT09IEFDVElPTl9XUklURSAmJiAocm9sZSA9PT0gTklGSV9ST0xFX1BST1ZJREVSIHx8IHJvbGUgPT09IE5JRklfUk9MRV9NQU5BR0VSKSkpewogICAgICAgICAgICAgICAgb2JqR3JwID0geydyZXZpc2lvbic6IHsndmVyc2lvbic6IDB9LCdpZCc6IGlkfTsKICAgICAgICAgICAgICAgIG5ld0dycHMucHVzaChvYmpHcnApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG5ld0dycHM7Cn0KCi8qKgogKiBDaGVjayB0aGUgZXhpc3RlbmNlIG9mIHByb2Nlc3MgZ3JvdXAgYmVmb3JlIGNyZWF0aW5nIGl0LCBpbiBvcmRlciB0byBhdm9pZCBkdXBsaWNhdGVzCiAqLwpmdW5jdGlvbiBjaGVja0V4aXN0ZW5jZShwYXJlbnRJZCwgcHJvY2Vzc0dyb3VwTmFtZSwgYXNzaWduUm9sZSkgewogICAgdmFyIHVybCA9IE5JRklfRU5EUE9JTlQgKyAnL2Zsb3cvcHJvY2Vzcy1ncm91cHMvJyArIHBhcmVudElkICsgJy9zdGF0dXM/cmVjdXJzaXZlPWZhbHNlJzsKICAgIHJldHVybiBheGlvcy5nZXQodXJsLHtodHRwc0FnZW50fSkKICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICAgIHZhciBwZ0lkID0gcmVhZFJlY3Vyc2l2ZVBHKHJlc3BvbnNlLmRhdGEucHJvY2Vzc0dyb3VwU3RhdHVzLmFnZ3JlZ2F0ZVNuYXBzaG90LCBwcm9jZXNzR3JvdXBOYW1lKTsgIAogICAgICAgICAgICByZXR1cm4gW3BhcmVudElkLCBwcm9jZXNzR3JvdXBOYW1lLCBwZ0lkLCBhc3NpZ25Sb2xlXQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKGVycm9yID0+IFtwYXJlbnRJZCwgcHJvY2Vzc0dyb3VwTmFtZSwgMCwgYXNzaWduUm9sZV0pOwp9CgpmdW5jdGlvbiBydW5UYXNrKHJlc3VsdCwgc3BlYywgYXNzaWduUm9sZSkgewogICAgY29uc29sZS5sb2coIkluc2lkZSBydW5UYXNrIik7CiAgICBjb25zb2xlLmxvZyhyZXN1bHQpOyBjb25zb2xlLmxvZyhhc3NpZ25Sb2xlKTsKICAgIHZhciBwYXJlbnRJZCA9ICJyb290IjsKICAgIGlmKHJlc3VsdCAhPSB1bmRlZmluZWQgJiYgcmVzdWx0ICE9IG51bGwpIHBhcmVudElkID0gcmVzdWx0WzBdOwogICAgcmV0dXJuIGNoZWNrRXhpc3RlbmNlKHBhcmVudElkLCBzcGVjLCBhc3NpZ25Sb2xlKTsKfQoKYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0dyb3Vwc1Vwc2VydChwcm9jZXNzR3JvdXBzVG9VcHNlcnQsIHJvbGVOYW1lLCB1c2VybmFtZSl7CiAgICBjb25zdCBzdGFydGVyUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShbInJvb3QiLCAwLCAwXSk7CiAgICBjb25zdCBhY3Rpb24gICAgICAgICAgICA9IHJlc3VsdCA9PiB7aWYoQXJyYXkuaXNBcnJheShyZXN1bHQpKSByZXR1cm4gY3JlYXRlUHJvY2Vzc0dyb3VwKHJlc3VsdFswXSwgcmVzdWx0WzFdLCByZXN1bHRbMl0sIHJlc3VsdFszXSwgcm9sZU5hbWUsIHVzZXJuYW1lKX07CiAgICB2YXIgY291bnQgPSBwcm9jZXNzR3JvdXBzVG9VcHNlcnQubGVuZ3RoOwogICAgYXdhaXQgcHJvY2Vzc0dyb3Vwc1RvVXBzZXJ0LnJlZHVjZSgKICAgICAgICAocCwgc3BlYywgaW5kZXgpID0+IHAudGhlbigocmVzdWx0KSA9PiBydW5UYXNrKHJlc3VsdCwgc3BlYywgaW5kZXggPT09IGNvdW50LTEpLnRoZW4oYWN0aW9uKSksCiAgICAgICAgc3RhcnRlclByb21pc2UKICAgICk7Cn0KCmV4cG9ydHMuaGFuZGxlciA9IChjb250ZXh0LCBldmVudCkgPT4gewogICAgZXh0cmFjdENsYWltcyhjb250ZXh0LCBldmVudC5oZWFkZXJzLCBmdW5jdGlvbihjbGFpbXMpIHsKICAgICAgICB0cnl7CiAgICAgICAgICAgIC8vIGV4dHJhY3Qgcm9sZXMKICAgICAgICAgICAgY29udGV4dC5sb2dnZXIuaW5mb1dpdGgoJ1JvbGVzIGZyb20gQUFDIGZvciBOaWZpOiAnLCBjbGFpbXNbQ1VTVE9NQ0xBSU1fUk9MRVNdKTsKICAgICAgICAgICAgdmFyIG5hbWUgID0gY2xhaW1zLnVzZXJuYW1lOwogICAgICAgICAgICB2YXIgdXNlcm5hbWUgPSBjbGFpbXMuZW1haWw7ICAKICAgICAgICAgICAgdmFyIHJvbGVzID0gY2xhaW1zW0NVU1RPTUNMQUlNX1JPTEVTXTsgICAgCiAgICAgICAgICAgIHZhciBvcmdhbml6YXRpb25zID0gW107ICAgCiAgICAgICAgICAgIHZhciByb2xlTmFtZXMgPSBbXTsKICAgICAgICAgICAgdmFyIHJvbGVOYW1lID0gIiI7CiAgICAgICAgICAgIGlmKHJvbGVzICE9IHVuZGVmaW5lZCl7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBvcmcgaW4gcm9sZXMpIHsKICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCdJbnNpZGUgbG9vcCBvZiBvcmdzIDogJyArIG9yZyArICIgIiArIHJvbGVzW29yZ10pOyAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgcm9sZU5hbWUgPSByb2xlc1tvcmddOwogICAgICAgICAgICAgICAgICAgIGlmKG9yZy5pbmRleE9mKCJfIikgPjApewogICAgICAgICAgICAgICAgICAgICAgICBvcmdhbml6YXRpb25zID0gb3JnLnNwbGl0KCJfIik7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICBvcmdhbml6YXRpb25zID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbnMucHVzaChvcmcpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBwcm9jZXNzR3JvdXBzVXBzZXJ0KG9yZ2FuaXphdGlvbnMsIHJvbGVOYW1lLCB1c2VybmFtZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb250ZXh0LmNhbGxiYWNrKHJvbGVzKTsKICAgICAgICAgICAgfSBlbHNlewogICAgICAgICAgICAgICAgY29udGV4dC5jYWxsYmFjayhuZXcgY29udGV4dC5SZXNwb25zZSh7bWVzc2FnZTogJ01pc3Npbmcgcm9sZXMgZnJvbSBBQUMuIENoZWNrIHRoZSBjbGFpbSBtYXBwaW5nJ30sIHt9LCAnYXBwbGljYXRpb24vanNvbicsIDUwMCkpOwogICAgICAgICAgICB9IAogICAgICAgICAgICBjb250ZXh0LmNhbGxiYWNrKHByb2Nlc3NHcm91cE5hbWUpOwogICAgICAgIH0gY2F0Y2goZXJyKXsKICAgICAgICAgICAgIGNvbnRleHQuY2FsbGJhY2sobmV3IGNvbnRleHQuUmVzcG9uc2Uoe21lc3NhZ2U6ICdOSUZJIGNhbGwgZmFpbHVyZScsIGVycjogZXJyfSwge30sICdhcHBsaWNhdGlvbi9qc29uJywgNTAwKSk7CiAgICAgICAgfQogICAgICAgIAogICAgfSk7Cn07Cg==","registry":"scltestacr.azurecr.io","runtimeAttributes":{"repositories":[]},"timestamp":1586524099},"description":"Provision Users,ProcessGroup, Policy for NiFi","env":[{"name":"AACJWKURL","value":"https://aac.kube-test.smartcommunitylab.it/jwk"},{"name":"AACRESOURCEID","value":"559c3587-2b99-4a8d-973a-e2395d4267cd"},{"name":"NIFIENDPOINT","value":"https://nifi.kube-test.smartcommunitylab.it/nifi_api"},{"name":"NIFI_CERTIFICATE_PASSW","valueFrom":{"secretKeyRef":{"key":"password","name":"nifi-user-pass"}}}],"eventTimeout":"","handler":"main:handler","image":"scltestacr.azurecr.io/processor-nodejs-nifi-connector:latest","imageHash":"1586524058451185705","imagePullSecrets":"registry-credentials","loggerSinks":[{"level":"debug"}],"maxReplicas":1,"minReplicas":1,"platform":{},"readinessTimeoutSeconds":60,"resources":{},"runRegistry":"scltestacr.azurecr.io","runtime":"nodejs","serviceType":"NodePort","targetCPU":75,"version":-1,"volumes":[{"volume":{"name":"certificates","secret":{"secretName":"nifi-user-cert"}},"volumeMount":{"mountPath":"/certificates","name":"certificates"}}]},"status":{"httpPort":30624,"scaleToZero":{"lastScaleEvent":"resourceUpdated","lastScaleEventTime":"2020-04-10T13:08:31.110350273Z"},"state":"ready"}}
  creationTimestamp: "2020-04-18T14:21:51Z"
  generation: 199
  labels:
    nuclio.io/project-name: nifi
  name: nodejs-nifi-connector
  namespace: sys
  resourceVersion: "16245363"
  selfLink: /apis/nuclio.io/v1beta1/namespaces/sys/nucliofunctions/nodejs-nifi-connector
  uid: d5f66399-141c-4c45-aaa6-ceacc48a438b
spec:
  alias: latest
  build:
    codeEntryType: sourceCode
    commands:
    - npm install --global moment
    - npm install --global jsonwebtoken
    - npm install --global axios
    - npm install --global jwks-rsa
    - npm install --global request
    functionSourceCode: 
    registry: scltestacr.azurecr.io
    runtimeAttributes:
      repositories: []
    timestamp: 1593823736
  description: Provision Users,ProcessGroup, Policy for NiFi
  env:
  - name: AACJWKURL
    value: https://aac.kube-test.smartcommunitylab.it/jwk
  - name: AACRESOURCEID
    value: 559c3587-2b99-4a8d-973a-e2395d4267cd
  - name: NIFIENDPOINT
    value: https://nifi.global.svc.cluster.local:8443/nifi-api
  - name: NIFI_CERTIFICATE_PASSW
    valueFrom:
      secretKeyRef:
        key: password
        name: nifi-user-pass
  eventTimeout: ""
  handler: main:handler
  image: scltestacr.azurecr.io/nuclio-sys-processor:latest
  imageHash: "1593823695116706340"
  imagePullSecrets: registry-credentials
  loggerSinks:
  - level: debug
  maxReplicas: 1
  minReplicas: 1
  platform: {}
  readinessTimeoutSeconds: 60
  resources: {}
  runRegistry: scltestacr.azurecr.io
  runtime: nodejs
  serviceType: NodePort
  targetCPU: 75
  version: -1
  volumes:
  - volume:
      name: certificates
      secret:
        secretName: nifi-user-cert-pem
    volumeMount:
      mountPath: /certificates
      name: certificates
status:
  httpPort: 32385
  scaleToZero:
    lastScaleEvent: resourceUpdated
    lastScaleEventTime: "2020-07-04T00:49:08.926471157Z"
  state: ready
