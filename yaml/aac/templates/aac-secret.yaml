---
# Source: aac/templates/aac-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-aac-bootstrap
  namespace: global
  labels:
    helm.sh/chart: aac-0.1.4
    app.kubernetes.io/name: aac
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  config.yaml: 
